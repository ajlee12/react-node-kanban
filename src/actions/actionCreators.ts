import { Action } from 'redux';
import { ThunkAction } from 'redux-thunk';
import * as types from '../constants/actionTypes';
import { CardContents, CardsState } from '../store/types';

// 'status' indicates which list the applicant is on.
const addComments = (
  id: string,
  comments: string,
) => ({
  type: types.ADD_COMMENTS,
  payload: {
    id,
    comments,
  },
});

const addCommentsThunk = (
  id: string,
  comments: string,
): ThunkAction<void, CardsState, null, Action<string>> => async (dispatch) => {
  try {
    const options = {
      method: 'POST',
      body: JSON.stringify({
        id,
        comments,
      }),
      headers: {'Content-Type': 'application/json'},
    };

    const response = await fetch('/cards', options);
    console.log(`response from addCommentsThunk's fetch: ${response}`);

    dispatch(addComments(id, comments));
  } catch(err) {
    console.log(`Error in addCommentsThunk's fetch: ${err}`);
  }
};

// Note that every newly created card gets the "Applied" status
// and goes into the Applied List. And we'll be using 
// a random ID generated by MongoDB to use as card's ID.
const addCard = (
  id: string,
  name: string,
  comments?: string,
) => ({
  type: types.ADD_CARD,
  payload: {
    id,
    name,
    comments,
  }
});

// Need an addCardThunk async action to 
// 1. Hit server to save card to DB
// 2. Get document's ID
// 3. Dispatch addCard to store with such ID and other payload.
const addCardThunk = (
  name: string,
  status: string,
  comments?: string,
): ThunkAction<void, CardsState, null, Action<string>> => async (dispatch) => {
  try {
    const options = {
      method: 'POST',
      body: JSON.stringify({
        name,
        comments,
        status,
      }),
      headers: {'Content-Type': 'application/json'},
    };
    // Resp. data should be a Mongo-generated ID (string) for the new card.
    const response = await fetch('/cards', options);
    const newCardID = await response.text();

    dispatch(addCard(newCardID, name, comments));
  } catch(err) {
    console.log(`Error in addCardThunk's fetch: ${err}`);
  }
};

// When a card is dragged from a list to another, its status changes.
const changeStatus = (
  id: string,
  status: string
) => ({
  type: types.CHANGE_STATUS,
  payload: {
    id,
    status
  },
});


const syncCardsFromDbToStore = (cardsArray: CardContents[]) => ({
  type: types.SYNC_CARDS,
  payload: cardsArray,
});

const getAllCardsFromDbThunk = (): ThunkAction<void, CardsState, null, Action<string>> => async (dispatch) => {
  try {
    const options = {
      method: 'GET',
    };
    // Resp. data should be an array of cards.
    const response = await fetch('/cards', options);
    const cardsArray = await response.json();

    dispatch(syncCardsFromDbToStore(cardsArray));

    ///////////
    return cardsArray;
  } catch(err) {
    console.log(`Error in getAllCardsFromDbThunk's fetch: ${err}`);
  }
};



const actions = {
  addComments,
  addCommentsThunk,
  addCard,
  changeStatus,
  addCardThunk,
  getAllCardsFromDbThunk
};

export default actions;
